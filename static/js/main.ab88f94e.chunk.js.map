{"version":3,"sources":["store/actions/types.js","store/reducers/markdownReducer.js","store/reducers/errorReducer.js","store/reducers/index.js","store/index.js","store/actions/markdownActions.js","components/FileUpload.js","store/actions/errorActions.js","components/FileDownload.js","components/AppNavbar.js","components/PreviewWindow.js","components/EditorWindow.js","components/ErrorDisplay.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_ERROR","CLEAR_ERROR","initialState","markdown","code","message","combineReducers","state","action","type","error","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","readFile","file","Promise","resolve","reader","FileReader","onload","result","readAsText","FileUpload","onFilesChange","files","props","loadFromFile","onFilesError","updateError","this","clickable","children","onChange","onError","accepts","multiple","maxFileSize","minFileSize","Component","defaultProps","connect","dispatch","a","console","log","FileDownload","downloadFile","Blob","element","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","onClick","AppNavbar","toggleNavbar","bind","collapsed","setState","Navbar","color","dark","expand","className","NavbarBrand","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","target","marked","setOptions","gfm","PreviewWindow","markdownHtml","content","EditorWindow","event","updateMarkdown","value","Input","name","ErrorDisplay","isVisible","removeError","clearError","setTimeout","Alert","toggle","App","Container","fluid","Row","Col","sm","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab88f94e.chunk.js","sourcesContent":["export const UPDATE_MARKDOWN = 'UPDATE_MARKDOWN';\r\nexport const LOAD_FROM_FILE = 'LOAD_FROM_FILE';\r\n\r\nexport const UPDATE_ERROR = 'UPDATE_ERROR';\r\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\r\n","import { UPDATE_MARKDOWN, LOAD_FROM_FILE } from '../actions/types';\r\n\r\nconst initialState = {\r\n  markdown:\r\n    'Enter Markdown \\n===========\\n Either\\n - **Type**\\n - **Load File** from the menu\\n - Drag and drop **.md** file',\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_MARKDOWN:\r\n      return {\r\n        markdown: action.markdown,\r\n      };\r\n\r\n    case LOAD_FROM_FILE:\r\n      return {\r\n        ...state,\r\n        markdown: action.markdown,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { UPDATE_ERROR, CLEAR_ERROR } from '../actions/types';\r\n\r\nconst initialState = {\r\n  code: null,\r\n  message: null,\r\n};\r\n\r\nexport default function errorReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_ERROR:\r\n      return {\r\n        code: action.error.code,\r\n        message: action.error.message,\r\n      };\r\n\r\n    case CLEAR_ERROR:\r\n      return {\r\n        code: null,\r\n        message: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport markdownReducer from './markdownReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport default combineReducers({\r\n  markdown: markdownReducer,\r\n  error: errorReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    // for chrome Redux devtools\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  ),\r\n);\r\n\r\nexport default store;\r\n","import { UPDATE_MARKDOWN, LOAD_FROM_FILE } from './types';\r\n\r\nexport const updateMarkdown = markdown => {\r\n  return {\r\n    type: UPDATE_MARKDOWN,\r\n    markdown,\r\n  };\r\n};\r\n\r\nexport const loadFromFile = file => async dispatch => {\r\n  try {\r\n    const markdown = await readFile(file);\r\n\r\n    dispatch({\r\n      type: LOAD_FROM_FILE,\r\n      markdown,\r\n    });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nconst readFile = file => {\r\n  return new Promise(resolve => {\r\n    var reader = new FileReader();\r\n    reader.onload = () => {\r\n      resolve(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  });\r\n};\r\n","import React, { Component } from 'react';\r\nimport Files from 'react-files';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { loadFromFile } from '../store/actions/markdownActions';\r\nimport { updateError } from '../store/actions/errorActions';\r\n\r\nexport class FileUpload extends Component {\r\n  static propTypes = {\r\n    clickable: PropTypes.bool,\r\n    loadFromFile: PropTypes.func.isRequired,\r\n    updateError: PropTypes.func.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    clickable: true,\r\n  };\r\n\r\n  onFilesChange = files => {\r\n    this.props.loadFromFile(files[0]);\r\n  };\r\n\r\n  onFilesError = error => {\r\n    this.props.updateError(error);\r\n  };\r\n\r\n  render() {\r\n    const { clickable, children } = this.props;\r\n    return (\r\n      <Files\r\n        onChange={this.onFilesChange}\r\n        onError={this.onFilesError}\r\n        accepts={['.md']}\r\n        multiple={false}\r\n        maxFileSize={10000000}\r\n        minFileSize={0}\r\n        clickable={clickable}\r\n      >\r\n        {children}\r\n      </Files>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { loadFromFile, updateError },\r\n)(FileUpload);\r\n","import { UPDATE_ERROR, CLEAR_ERROR } from './types';\r\n\r\nexport const updateError = error => ({\r\n  type: UPDATE_ERROR,\r\n  error,\r\n});\r\n\r\nexport const clearError = () => ({\r\n  type: CLEAR_ERROR,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class FileDownload extends Component {\r\n  static propTypes = {\r\n    markdown: PropTypes.string.isRequired,\r\n  };\r\n\r\n  // immediately downloads, doesn't give prompt\r\n  downloadFile = () => {\r\n    const { markdown } = this.props;\r\n\r\n    const file = new Blob([markdown], { type: 'text/plain' });\r\n\r\n    const element = document.createElement('a');\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = 'markdown.md';\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return <div onClick={this.downloadFile}>{children}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  markdown: state.markdown.markdown,\r\n});\r\n\r\nexport default connect(mapStateToProps)(FileDownload);\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\n\r\nimport FileUpload from './FileUpload';\r\nimport FileFownload from './FileDownload';\r\n\r\nexport default class AppNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true,\r\n    };\r\n  }\r\n\r\n  toggleNavbar() {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-4\">\r\n        <NavbarBrand href=\"/\" className=\"mr-auto ml-2\">\r\n          Markdown Editor\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!this.state.collapsed} navbar>\r\n          <Nav navbar className=\"ml-auto\">\r\n            <NavItem>\r\n              <FileUpload>\r\n                <NavLink href=\"#\">Load File</NavLink>\r\n              </FileUpload>\r\n            </NavItem>\r\n            <NavItem>\r\n              <FileFownload>\r\n                <NavLink href=\"#\">Save to File</NavLink>\r\n              </FileFownload>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                href=\"https://help.github.com/en/categories/writing-on-github\"\r\n                target=\"__blank\"\r\n              >\r\n                Guide\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport marked from 'marked';\r\nimport Interweave from 'interweave';\r\n\r\nmarked.setOptions({\r\n  gfm: true,\r\n});\r\n\r\nexport class PreviewWindow extends Component {\r\n  static propTypes = {\r\n    markdown: PropTypes.string.isRequired,\r\n  };\r\n\r\n  render() {\r\n    const { markdown } = this.props;\r\n    const markdownHtml = marked(markdown);\r\n    return <Interweave content={markdownHtml} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  markdown: state.markdown.markdown,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PreviewWindow);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PropTypes } from 'prop-types';\r\nimport { updateMarkdown } from '../store/actions/markdownActions';\r\nimport { Input } from 'reactstrap';\r\n\r\nexport class EditorWindow extends Component {\r\n  static propTypes = {\r\n    markdown: PropTypes.string.isRequired,\r\n    updateMarkdown: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onChange = event => {\r\n    const { updateMarkdown } = this.props;\r\n    const newMarkdown = event.target.value;\r\n\r\n    updateMarkdown(newMarkdown);\r\n  };\r\n\r\n  render() {\r\n    const { markdown } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Input\r\n          type=\"textarea\"\r\n          name=\"text\"\r\n          value={markdown}\r\n          onChange={this.onChange}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  markdown: state.markdown.markdown,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { updateMarkdown },\r\n)(EditorWindow);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert } from 'reactstrap';\r\nimport { clearError } from '../store/actions/errorActions';\r\n\r\nexport class ErrorDisplay extends Component {\r\n  state = {\r\n    isVisible: false,\r\n  };\r\n\r\n  static propTypes = {\r\n    error: PropTypes.shape({\r\n      code: PropTypes.number,\r\n      message: PropTypes.string,\r\n    }),\r\n    clearError: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.error.message && !this.state.isVisible) {\r\n      this.setState({ isVisible: true });\r\n      setTimeout(this.removeError, 2000);\r\n    }\r\n  }\r\n\r\n  removeError = () => {\r\n    this.props.clearError();\r\n    this.setState({ isVisible: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Alert\r\n          color=\"danger\"\r\n          isOpen={this.state.isVisible}\r\n          toggle={this.removeError}\r\n        >\r\n          {this.props.error.message}\r\n        </Alert>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  error: state.error,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { clearError },\r\n)(ErrorDisplay);\r\n","import React, { Component } from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport './App.css';\nimport AppNavbar from './components/AppNavbar';\nimport PreviewWindow from './components/PreviewWindow';\nimport EditorWindow from './components/EditorWindow';\nimport FileUpload from './components/FileUpload';\nimport ErrorDisplay from './components/ErrorDisplay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <AppNavbar />\n          <Container fluid>\n            <ErrorDisplay />\n            <FileUpload clickable={false}>\n              <Row>\n                <Col sm className=\"full-height editor\">\n                  <EditorWindow />\n                </Col>\n                <Col sm className=\"full-height preview \">\n                  <PreviewWindow />\n                </Col>\n              </Row>\n            </FileUpload>\n          </Container>\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}